Глава 1.

ВВЕДЕНИЕ В ООП И КЛАССЫ.

Каждый дурак может написать программу, которую может понять компьютер. Хороший программист пишет программу, которую может понять человек.

Мартин Фаулер (example.post.intext@mail.net).
(+375(29)623-32-14 example of telephone number).

Основные понятия ООП.

Java является объектно-ориентированным языком программирования, вследствие чего предварительно будут приведены основные парадигмы ООП.
В связи с проникновением компьютеров во все сферы социума программные системы становятся более простыми для пользователя и сложными по внутренней архитектуре. Программирование стало делом команды, где маленьким проектом считается тот, который выполняет команда из  5–10 специалистов за время от полугода до года.
Основным способом борьбы со сложностью программных продуктов стало объектно-ориентированное программирование  (ООП), являющееся в настоя щее время наиболее популярной парадигмой.
ООП  — методология программирования, основанная на представлении программного продукта в виде совокупности объектов, каждый из которых является экземпляром конкретного класса. ООП использует в качестве базовых элементов взаимодействие объектов. Объект — именнованная модель реальной сущности, обладающая конкрет ными значениями свойств и проявляющая свое поведение.
В применении к объектно-ориентированным языкам программирования понятия объекта и класса конкретизируются.

Объект — обладающий именем набор данных (полей и свойств объекта), физически на ходящихся в памяти компьютера, и методов, имеющих доступ к ним. Имя исполь зуется для работы с полями и методами объекта.
Любой объект относится к определенному классу. В классе дается обобщенное описание некоторого набора родственных объектов. Объект — конкретный экземпляр класса.
В качестве примера можно привести абстракцию дома или его описание (класс) и реальный дом (экземпляр класса или объект). Объект соответствует логической модели дома, представляющей совокупное описание всех физических объектов.

Класс принято обозначать в виде прямоугольника, разделенного на три части. В верхний прямоугольник помещается имя класса, в средний — набор полей с именами, типами, свойствами класса, и в нижний — список методов, их параметров и возвращаемых значений.
Реальный объект должен иметь конкретные значения всех полей, например:
id=35, masonry="brick", numberFloors=2, numberWindows=7.

Объектно-ориентированное программирование основано на принципах:
— инкапсуляции;
— наследования;
— полиморфизма, в частности, «позднего связывания».

Инкапсуляция (encapsulation) — принцип, объединяющий данные и код, манипулирующий этими данными, а также защищающий данные от прямого внешнего доступа и неправильного использования. Другими словами, доступ к данным класса возможен только посредством методов этого же класса.
Наследование  (inheritance)  — процесс, посредством которого один класс может наследовать свойства другого класса и добавлять к ним свойства и методы, характерные только для него.
Наследование бывает двух видов:
одиночное наследование  — подкласс  (производный класс) имеет один и только один суперкласс (предок).
множественное наследование  — класс может иметь любое количество предков (в Java запрещено).

Полиморфизм (polymorphism) — механизм, использующий одно и то же имя метода для решения похожих, но несколько отличающихся задач в различных объектах при наследовании из одного суперкласса. Целью полиморфизма является использование одного имени при выполнении общих для суперкласса и подклассов действий.
Механизм «позднего связывания» в процессе выполнения программы определяет принадлежность объекта конкретному классу и производит вызов метода, относящегося к классу, объект которого был использован. Механизм «позднего связывания» позволяет определять версию полиморфного (виртуального) метода во время выполнения программы. Другими словами, иногда невозможно на этапе компиляции определить, какая версия переопределенного метода будет вызвана на этапе выполнения программы.
Краеугольным камнем наследования и полиморфизма предстает следующая парадигма: «объект подкласса может использоваться всюду, где используется объект суперкласса». То есть при добавлении к иерархии классов нового подкласса существующий код с экземпляром нового подкласса будет работать точно  так же, как и со всеми другими экземплярами классов в иерархии.
При вызове метода сначала он ищется в самом классе. Если метод существует, то он вызывается. Если же метод в текущем классе отсутствует, то обращение происходит к родительскому классу и вызываемый метод ищется в этом классе. Если поиск неудачен, то он продолжается вверх по иерархическому дереву вплоть до корня (верхнего класса Object) иерархии.

Язык Java.
Объектно-ориентированный язык Java, разработанный в компании Sun Microsystems в 1995 году для оживления графики на стороне клиента с помощью апплетов, в настоящее время используется для создания переносимых на различные платформы и опера ционные системы программ. Язык Java нашел широкое применение в Интернет-приложениях, добавив на статические и клиентские веб-страницы динамическую графику, улучшив интерфейсы и реализовав вычислительные возможности. Но объектно-ориентированная парадигма и кроссплатформенность привели к тому, что уже буквально через несколько лет после создания язык практически покинул клиентские страницы и перебрался на серверы. На стороне клиента его место заняли языки JavaScript, Adobe Flash и проч.
При создании язык Java предполагался более простым, чем его синтаксический предок С++. Сегодня с появлением новых версий возможности языка Java существенно расширились и во многом перекрывают функциональность С++. Java уже не уступает по сложности предшественникам и называть его простым нельзя.
Отсутствие указателей  (наиболее опасного средства языка С++) нельзя считать сужением возможностей, а тем более — недостатком, это просто требование безопасности. Возможность работы с произвольными адресами памяти через безтиповые указатели позволяет игнорировать защиту памяти.

Отсутствие в Java множественного наследования легко заменяется на болеепонятные конструкции с применением интерфейсов.
Системная библиотека классов языка Java содержит классы и пакеты, реализующие и расширяющие базовые возможности языка, а также сетевые средства, взаимодействие с базами данных, графические интерфейсы и многое другое. Методы классов, включенных в эти библиотеки, вызываются JVM (Java Virtual Machine) во время интерпретации программы.